"""
Django settings for advanced_features_and_security project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-w8*t)1066h+1m&33qk1nj&ovy0klfr_53%q@w&laqiz$ihs=%a'

# SECURITY WARNING: don't run with debug turned on in production!
# Set to False in production for security
DEBUG = os.getenv('DEBUG', 'True').lower() == 'true'

# Allowed hosts - specify your domain in production
ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1').split(',')

# ============================================================================
# HTTPS AND SECURITY SETTINGS - Django Security Best Practices
# ============================================================================

# HTTPS Configuration - Step 1: Configure Django for HTTPS Support
# ============================================================================

# Force HTTPS redirects - redirects all HTTP requests to HTTPS
# SECURE_SSL_REDIRECT: When True, Django will redirect all non-HTTPS requests to HTTPS
# This is essential for production environments to ensure all traffic is encrypted
SECURE_SSL_REDIRECT = not DEBUG  # True in production, False in development

# HSTS (HTTP Strict Transport Security) Configuration
# SECURE_HSTS_SECONDS: Tells browsers to only access the site via HTTPS for specified time
# Setting to 31536000 (1 year) instructs browsers to remember this for a full year
SECURE_HSTS_SECONDS = 31536000 if not DEBUG else 0  # 1 year in production, disabled in dev

# SECURE_HSTS_INCLUDE_SUBDOMAINS: Applies HSTS policy to all subdomains
# This ensures that subdomains are also protected by HSTS
SECURE_HSTS_INCLUDE_SUBDOMAINS = not DEBUG

# SECURE_HSTS_PRELOAD: Allows the domain to be included in HSTS preload lists
# This provides protection even on first visit to the site
SECURE_HSTS_PRELOAD = not DEBUG

# SSL Proxy Configuration for deployment behind reverse proxy (like nginx)
# SECURE_PROXY_SSL_HEADER: Tells Django how to detect HTTPS when behind a proxy
# This is crucial for applications deployed behind load balancers or reverse proxies
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Step 2: Enforce Secure Cookies
# ============================================================================

# Session Cookie Security - ensures session cookies are only sent over HTTPS
# SESSION_COOKIE_SECURE: When True, session cookies will only be sent over HTTPS
# This prevents session hijacking over insecure connections
SESSION_COOKIE_SECURE = not DEBUG  # True in production, False in development

# CSRF Cookie Security - ensures CSRF tokens are only sent over HTTPS
# CSRF_COOKIE_SECURE: When True, CSRF cookies will only be sent over HTTPS
# This prevents CSRF token interception over insecure connections
CSRF_COOKIE_SECURE = not DEBUG  # True in production, False in development

# Additional Cookie Security Settings
# Prevent client-side JavaScript from accessing security-critical cookies
CSRF_COOKIE_HTTPONLY = True  # Prevents XSS attacks from stealing CSRF tokens
SESSION_COOKIE_HTTPONLY = True  # Prevents XSS attacks from stealing session IDs

# SameSite cookie protection - prevents CSRF attacks
# 'Strict' provides the strongest protection against CSRF
SESSION_COOKIE_SAMESITE = 'Strict'
CSRF_COOKIE_SAMESITE = 'Strict'

# Session timeout and expiration settings
SESSION_COOKIE_AGE = 3600  # 1 hour session timeout for security
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # Clear session when browser closes

# Step 3: Implement Secure Headers
# ============================================================================

# Browser Security Headers - protect against various types of attacks

# X_FRAME_OPTIONS: Prevents clickjacking attacks by controlling iframe embedding
# 'DENY' completely prevents the page from being embedded in any frame
X_FRAME_OPTIONS = 'DENY'

# SECURE_CONTENT_TYPE_NOSNIFF: Prevents MIME-sniffing attacks
# Prevents browsers from interpreting files as different MIME types
SECURE_CONTENT_TYPE_NOSNIFF = True

# SECURE_BROWSER_XSS_FILTER: Enables browser's built-in XSS filtering
# Helps prevent cross-site scripting attacks by enabling browser protection
SECURE_BROWSER_XSS_FILTER = True

# Referrer Policy - controls how much referrer information is sent with requests
# 'strict-origin-when-cross-origin' provides good balance of security and functionality
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

# Additional Security Headers (can be set in middleware or web server)
# These can also be configured at the web server level (nginx/apache)
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'csp',  # Content Security Policy middleware
    'bookshelf',  # App containing custom user model
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'csp.middleware.CSPMiddleware',  # Content Security Policy
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'advanced_features_and_security.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'advanced_features_and_security.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation will be configured in the security section below

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'

# Media files (User uploaded content)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Custom User Model
AUTH_USER_MODEL = 'bookshelf.CustomUser'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# ============================================================================
# CONTENT SECURITY POLICY (CSP) SETTINGS
# ============================================================================

# CSP settings to prevent XSS attacks
# These settings control what resources can be loaded and executed

# Default source for all content
CSP_DEFAULT_SRC = ("'self'",)

# Script sources (JavaScript)
CSP_SCRIPT_SRC = (
    "'self'",
    "'unsafe-inline'",  # Allow inline scripts (be cautious with this)
    "https://cdn.jsdelivr.net",  # Allow scripts from CDN
)

# Style sources (CSS)
CSP_STYLE_SRC = (
    "'self'",
    "'unsafe-inline'",  # Allow inline styles for development
    "https://fonts.googleapis.com",
    "https://cdn.jsdelivr.net",
)

# Image sources
CSP_IMG_SRC = (
    "'self'",
    "data:",  # Allow data URIs for images
    "https:",  # Allow HTTPS images
)

# Font sources
CSP_FONT_SRC = (
    "'self'",
    "https://fonts.gstatic.com",
)

# Connect sources (AJAX, WebSocket, etc.)
CSP_CONNECT_SRC = ("'self'",)

# Frame sources (for embedding content)
CSP_FRAME_SRC = ("'none'",)  # Don't allow any frames

# Object sources (for plugins like Flash)
CSP_OBJECT_SRC = ("'none'",)  # Don't allow any plugins

# Media sources (audio/video)
CSP_MEDIA_SRC = ("'self'",)

# Report CSP violations (optional - for monitoring)
# CSP_REPORT_URI = '/csp-report/'

# ============================================================================
# LOGGING CONFIGURATION
# ============================================================================

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'django.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['file', 'console'],
            'level': 'INFO',
            'propagate': True,
        },
        'bookshelf': {
            'handlers': ['file', 'console'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

# ============================================================================
# ADDITIONAL SECURITY SETTINGS
# ============================================================================

# Password validation - strengthen password requirements
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 12,  # Increased minimum length
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Security-related settings for production
if not DEBUG:
    # Additional production security settings
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    USE_TZ = True
    
    # Database connection security
    DATABASES['default']['OPTIONS'] = {
        'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
    }

# File upload security
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
FILE_UPLOAD_PERMISSIONS = 0o644

# Email security settings (if using email)
EMAIL_USE_TLS = True
EMAIL_USE_SSL = False

# Cache security (if using cache)
CACHE_MIDDLEWARE_SECONDS = 600
CACHE_MIDDLEWARE_KEY_PREFIX = 'bookshelf'
